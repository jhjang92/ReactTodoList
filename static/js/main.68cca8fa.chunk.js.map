{"version":3,"sources":["components/TodoTempleate.js","components/TodoHead.js","components/TodoContext.js","components/TodoCreate.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplateMain","styled","main","TodoTemplate","children","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","substring","TodoHeader","header","TodoHead","initialTodos","id","title","content","done","accordion","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoOpenContext","TodoNextIdContext","TodoTypeContext","TodoInputsContext","TodoSelectedContext","TodoProvider","useReducer","dispatch","useState","open","setOpen","nextId","useRef","setType","inputs","setInputs","selected","setSelected","Provider","value","useTodoDispatch","context","useContext","useTodoOpenState","useTodoType","useTodoInputs","useTodoSelected","TodoCreateBox","div","TodoCreateInsertUpdateForm","form","props","css","TodoCreateInputBox","TodoCreateTitleInput","input","TodoCreateContentInput","textarea","TodoCreateAddUdateButton","button","TodoCreateButton","React","memo","useTodoNextId","submitName","setSubmitName","onChange","e","target","name","onSubmit","preventDefault","current","placeholder","onClick","TodoItemStyleBox","TodoItemCheckBox","TodoItemText","TodoItemButtonBox","TodoItemUpdate","TodoItemRemove","TodoItemList","li","TodoItemTitleBox","TodoItemContentBox","p","htmlFor","setTimeout","currentTarget","parentNode","classList","add","autoFocus","TodoListArticle","article","TodoList","todos","useTodoState","countTodo","length","key","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68cca8fa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TodoTemplateMain = styled.main`\r\n  width: 512px;\r\n  height: 768px;\r\n  position: relative;\r\n  background: white;\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.04);\r\n  border-radius: 16px;\r\n\r\n  margin: 96px auto 32px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  > header {\r\n    width: 100%;\r\n    text-align: center;\r\n    h2 {\r\n      span {\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction TodoTemplate({ children }) {\r\n  const today = new Date();\r\n  const dateString = today.toLocaleDateString(\"ko-KR\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  });\r\n  const dayName = today\r\n    .toLocaleDateString(\"ko-KR\", {\r\n      weekday: \"long\",\r\n    })\r\n    .substring(0, 1);\r\n\r\n  return (\r\n    <TodoTemplateMain>\r\n      {/* js내장함수 현재시간 추출 후 대체하기. */}\r\n      <header>\r\n        <h2>\r\n          {dateString} (<span>{dayName}</span>)\r\n        </h2>\r\n      </header>\r\n      {children}\r\n    </TodoTemplateMain>\r\n  );\r\n}\r\n\r\nexport default TodoTemplate;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TodoHeader = styled.header`\r\n  width: 1px;\r\n  height: 1px;\r\n  margin: 0;\r\n  padding: 0;\r\n  font-size: 0;\r\n  overflow: hidden;\r\n`;\r\n\r\nfunction TodoHead() {\r\n  return (\r\n    <TodoHeader>\r\n      <h1>TodoList - React</h1>\r\n    </TodoHeader>\r\n  );\r\n}\r\n\r\nexport default TodoHead;\r\n","import React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useReducer,\r\n  useRef,\r\n} from \"react\";\r\n\r\nconst initialTodos = [\r\n  {\r\n    id: 1,\r\n    title: \"프로젝트 생성하기\",\r\n    content: \"첫 시작은 설치부터!\",\r\n    done: true,\r\n    accordion: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"투두리스트 만들기\",\r\n    content: \"벨로퍼트님의 패스트캠퍼스 영상 및 개정판 책 참고하여 개발\",\r\n    done: true,\r\n    accordion: false,\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"UseState\",\r\n    content:\r\n      \"특정 값들을 직접적인 변경대신 상태관리 훅을 통해 불변성을 지키며 작성\",\r\n    done: true,\r\n    accordion: false,\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"useContext\",\r\n    content:\r\n      \"값들을 여러 컴포넌트에서 가져다 쓰기 쉽도록 별도 파일로 분리하여 작성\",\r\n    done: true,\r\n    accordion: false,\r\n  },\r\n  {\r\n    id: 5,\r\n    title: \"useReducer\",\r\n    content:\r\n      \"useContext와 사용하기 좋았으며, 다른 컴포넌트에서 dispatch(action) 하여 해당내용 실행\",\r\n    done: true,\r\n    accordion: false,\r\n  },\r\n  {\r\n    id: 6,\r\n    title: \"useRef\",\r\n    content: \"Dom의 태그 선택, 렌더링은 필요없는 값들을 담을때 사용\",\r\n    done: true,\r\n    accordion: false,\r\n  },\r\n  {\r\n    id: 7,\r\n    title: \"styled-component\",\r\n    content:\r\n      \"style 을 각 컴포넌트내에서 사용하며, 변수를 사용하여 값에따른 변화 적용\",\r\n    done: true,\r\n    accordion: false,\r\n  },\r\n  {\r\n    id: 8,\r\n    title: \"useEffect\",\r\n    content:\r\n      \"아직 한번도 사용해보지 않아서 다음 프로젝트때 공부하여 적용시킬 예정\",\r\n    done: false,\r\n    accordion: false,\r\n  },\r\n  {\r\n    id: 9,\r\n    title: \"useCallback\",\r\n    content: \"다음 프로젝트때 공부하여 적용해볼 예정\",\r\n    done: false,\r\n    accordion: false,\r\n  },\r\n];\r\n\r\nfunction todoReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"CREATE\":\r\n      return state.concat(action.todo);\r\n    case \"TOGGLE\":\r\n      return state.map((todo) =>\r\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\r\n      );\r\n    case \"UPDATE\":\r\n      return state.map((todo) =>\r\n        todo.id === action.todo.id\r\n          ? {\r\n              ...todo,\r\n              title: action.todo.title,\r\n              content: action.todo.content,\r\n            }\r\n          : todo\r\n      );\r\n    case \"REMOVE\":\r\n      return state.filter((todo) => todo.id !== action.id);\r\n    case \"ACCORDION\":\r\n      return state.map((todo) =>\r\n        todo.id === action.id ? { ...todo, accordion: !todo.accordion } : todo\r\n      );\r\n    default:\r\n      throw new Error(`Unhadled action type: ${action.type}`);\r\n  }\r\n}\r\n\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoOpenContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\nconst TodoTypeContext = createContext();\r\nconst TodoInputsContext = createContext();\r\nconst TodoSelectedContext = createContext();\r\n\r\nexport function TodoProvider({ children }) {\r\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n  const [open, setOpen] = useState(false);\r\n  const nextId = useRef(10);\r\n  const [type, setType] = useState(\"\");\r\n  const [inputs, setInputs] = useState({\r\n    title: \"\",\r\n    content: \"\",\r\n  });\r\n  const [selected, setSelected] = useState(0);\r\n\r\n  return (\r\n    <TodoStateContext.Provider value={state}>\r\n      <TodoDispatchContext.Provider value={dispatch}>\r\n        <TodoOpenContext.Provider value={[open, setOpen]}>\r\n          <TodoNextIdContext.Provider value={nextId}>\r\n            <TodoTypeContext.Provider value={[type, setType]}>\r\n              <TodoInputsContext.Provider value={[inputs, setInputs]}>\r\n                <TodoSelectedContext.Provider value={[selected, setSelected]}>\r\n                  {children}\r\n                </TodoSelectedContext.Provider>\r\n              </TodoInputsContext.Provider>\r\n            </TodoTypeContext.Provider>\r\n          </TodoNextIdContext.Provider>\r\n        </TodoOpenContext.Provider>\r\n      </TodoDispatchContext.Provider>\r\n    </TodoStateContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTodoState() {\r\n  const context = useContext(TodoStateContext);\r\n  if (!context) {\r\n    throw new Error(\"Cannot find TodoProvider\");\r\n  }\r\n  return context;\r\n}\r\nexport function useTodoDispatch() {\r\n  const context = useContext(TodoDispatchContext);\r\n  if (!context) {\r\n    throw new Error(\"Cannot find TodoProvider\");\r\n  }\r\n  return context;\r\n}\r\nexport function useTodoOpenState() {\r\n  const context = useContext(TodoOpenContext);\r\n  if (!context) {\r\n    throw new Error(\"Cannot find TodoProvider\");\r\n  }\r\n  return context;\r\n}\r\nexport function useTodoNextId() {\r\n  const context = useContext(TodoNextIdContext);\r\n  if (!context) {\r\n    throw new Error(\"Cannot find TodoProvider\");\r\n  }\r\n  return context;\r\n}\r\nexport function useTodoType() {\r\n  const context = useContext(TodoTypeContext);\r\n  if (!context) {\r\n    throw new Error(\"Cannot find TodoProvider\");\r\n  }\r\n  return context;\r\n}\r\nexport function useTodoInputs() {\r\n  const context = useContext(TodoInputsContext);\r\n  if (!context) {\r\n    throw new Error(\"Cannot find TodoProvider\");\r\n  }\r\n  return context;\r\n}\r\nexport function useTodoSelected() {\r\n  const context = useContext(TodoSelectedContext);\r\n  if (!context) {\r\n    throw new Error(\"Cannot find TodoProvider\");\r\n  }\r\n  return context;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { MdAdd } from \"react-icons/md\";\r\nimport {\r\n  useTodoOpenState,\r\n  useTodoDispatch,\r\n  useTodoNextId,\r\n  useTodoType,\r\n  useTodoInputs,\r\n  useTodoSelected,\r\n} from \"./TodoContext\";\r\n\r\n// 추가&수정 버튼 , 할일추가버튼 CSS 작업 해야합니다.\r\nconst TodoCreateBox = styled.div`\r\n  overflow: hidden;\r\n`;\r\nconst TodoCreateInsertUpdateForm = styled.form`\r\n  padding: 10px 10px 50px 15px;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  background: #dee2e6;\r\n  border-radius: 10px;\r\n  transition: 0.6s ease-in-out;\r\n  transform: translateY(100%);\r\n  ${(props) =>\r\n    props.open &&\r\n    css`\r\n      transform: translateY(0%);\r\n    `}\r\n`;\r\nconst TodoCreateInputBox = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nconst TodoCreateTitleInput = styled.input`\r\n  height: 50px;\r\n  box-sizing: border-box;\r\n`;\r\nconst TodoCreateContentInput = styled.textarea`\r\n  margin-top: 10px;\r\n  height: 100px;\r\n  box-sizing: border-box;\r\n`;\r\nconst TodoCreateAddUdateButton = styled.button`\r\n  width: 100px;\r\n  height: 70px;\r\n  margin: 0 10px;\r\n  border: 1px solid black;\r\n  border-radius: 7px;\r\n  box-sizing: border-box;\r\n  background: #1f9bc4;\r\n  color: white;\r\n  &:hover {\r\n    background: #2567ad;\r\n  }\r\n  &:active {\r\n    background: #1f44c4;\r\n  }\r\n`;\r\nconst TodoCreateButton = styled.button`\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 50%;\r\n  transform: translate(-50%, 50%);\r\n  width: 70px;\r\n  height: 70px;\r\n  font-size: 60px;\r\n  border-radius: 100%;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  background: #38d9a9;\r\n  &:hover {\r\n    background: #63e6be;\r\n  }\r\n  &:active {\r\n    background: #20c997;\r\n  }\r\n  transition: 0.2s;\r\n  ${(props) =>\r\n    props.open &&\r\n    css`\r\n      background: #ff6b6b;\r\n      &:hover {\r\n        background: #ff8787;\r\n      }\r\n      &:active {\r\n        background: #fa5252;\r\n      }\r\n      transform: translate(-50%, 50%) rotate(45deg);\r\n    `}\r\n`;\r\n\r\nfunction TodoCreate() {\r\n  const [open, setOpen] = useTodoOpenState();\r\n  const [type, setType] = useTodoType();\r\n  const [inputs, setInputs] = useTodoInputs();\r\n  const nextId = useTodoNextId();\r\n  const dispatch = useTodoDispatch();\r\n  const [submitName, setSubmitName] = useState(\"Add\");\r\n  const [selected, setSelected] = useTodoSelected();\r\n\r\n  const { title, content } = inputs;\r\n\r\n  const onChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    setInputs({\r\n      ...inputs,\r\n      [name]: value,\r\n    });\r\n  };\r\n  const onToggle = () => {\r\n    setOpen(!open);\r\n    setType(\"CREATE\");\r\n    setInputs({\r\n      title: \"\",\r\n      content: \"\",\r\n    });\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (type === \"CREATE\") {\r\n      setSubmitName(\"Add\");\r\n      dispatch({\r\n        type: type,\r\n        todo: {\r\n          id: nextId.current,\r\n          title: title,\r\n          content: content,\r\n          done: false,\r\n        },\r\n      });\r\n      nextId.current += 1;\r\n    } else if (type === \"UPDATE\") {\r\n      dispatch({\r\n        type: type,\r\n        todo: {\r\n          id: selected,\r\n          title: title,\r\n          content: content,\r\n        },\r\n      });\r\n    }\r\n\r\n    setInputs({\r\n      title: \"\",\r\n      content: \"\",\r\n    });\r\n    setOpen(false);\r\n    setType(\"\");\r\n  };\r\n  return (\r\n    <TodoCreateBox>\r\n      <TodoCreateInsertUpdateForm open={open} onSubmit={onSubmit}>\r\n        <TodoCreateInputBox>\r\n          <TodoCreateTitleInput\r\n            type=\"text\"\r\n            placeholder=\"제목을 입력해주세요\"\r\n            name={\"title\"}\r\n            value={title}\r\n            onChange={onChange}\r\n          />\r\n          <TodoCreateContentInput\r\n            type=\"text\"\r\n            placeholder=\"내용을 입력해주세요\"\r\n            name={\"content\"}\r\n            value={content}\r\n            onChange={onChange}\r\n          />\r\n        </TodoCreateInputBox>\r\n        <TodoCreateAddUdateButton type=\"submit\">\r\n          {submitName}\r\n        </TodoCreateAddUdateButton>\r\n      </TodoCreateInsertUpdateForm>\r\n\r\n      <TodoCreateButton name=\"Add\" type=\"button\" onClick={onToggle} open={open}>\r\n        <MdAdd />\r\n      </TodoCreateButton>\r\n    </TodoCreateBox>\r\n  );\r\n}\r\n\r\nexport default React.memo(TodoCreate);\r\n","import React, { useRef } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { AiFillEdit } from \"react-icons/ai\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport { MdDone } from \"react-icons/md\";\r\nimport {\r\n  useTodoDispatch,\r\n  useTodoType,\r\n  useTodoOpenState,\r\n  useTodoInputs,\r\n  useTodoSelected,\r\n} from \"./TodoContext\";\r\n\r\nconst TodoItemStyleBox = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  flex: 1;\r\n`;\r\nconst TodoItemCheckBox = styled.div`\r\n  > input {\r\n    display: none;\r\n  }\r\n  > label {\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 100%;\r\n    border: 1px solid #ced4da;\r\n    font-size: 24px;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    ${(props) =>\r\n      props.done &&\r\n      css`\r\n        border: 1px solid #38d9a9;\r\n        color: #38d9a9;\r\n      `}\r\n  }\r\n`;\r\nconst TodoItemText = styled.button`\r\n  margin-left: 15px;\r\n  font-size: 20px;\r\n  color: #495057;\r\n\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      color: #ced4da;\r\n    `}\r\n\r\n  &:active {\r\n    color: #ced4da;\r\n  }\r\n`;\r\nconst TodoItemButtonBox = styled.div`\r\n  opacity: 0;\r\n  padding-right: 20px;\r\n`;\r\nconst TodoItemUpdate = styled.button`\r\n  align-items: center;\r\n  font-size: 24px;\r\n  margin-left: 10px;\r\n  &:hover {\r\n    color: #38d9a9;\r\n  }\r\n`;\r\nconst TodoItemRemove = styled.button`\r\n  align-items: center;\r\n  font-size: 24px;\r\n  margin-left: 10px;\r\n  &:hover {\r\n    color: #fa5252;\r\n  }\r\n`;\r\nconst TodoItemList = styled.li`\r\n  padding: 10px 0;\r\n  align-items: center;\r\n\r\n  &:hover {\r\n    ${TodoItemButtonBox} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nconst TodoItemTitleBox = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  position: relative;\r\n  &::after {\r\n    content: \"\";\r\n    width: 0%;\r\n    height: 1px;\r\n    background: red;\r\n    position: absolute;\r\n    left: 0;\r\n    top: 50%;\r\n    transform: translate(0, -50%);\r\n    transition: 0.6s;\r\n  }\r\n  &.remove {\r\n    &::after {\r\n      width: 100%;\r\n    }\r\n  }\r\n`;\r\n\r\nconst TodoItemContentBox = styled.p`\r\n  overflow: hidden;\r\n  transition: 0.7s;\r\n  margin: 0 80px 0 50px;\r\n  text-align: left;\r\n  word-break: break-all;\r\n  max-height: 0px;\r\n  overflow-y: auto;\r\n  -ms-overflow-style: none;\r\n  scrollbar-width: none;\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n  ${(props) =>\r\n    props.accordion &&\r\n    css`\r\n      max-height: 150px;\r\n      background: rgba(0, 0, 0, 0.1);\r\n      color: #495057;\r\n    `}\r\n`;\r\nfunction TodoItem({ id, done, title, content, accordion }) {\r\n  const dispatch = useTodoDispatch();\r\n  const [open, setOpen] = useTodoOpenState();\r\n  const [type, setType] = useTodoType();\r\n  const [inputs, setInputs] = useTodoInputs();\r\n  const [selected, setSelected] = useTodoSelected();\r\n\r\n  const onToggle = () =>\r\n    dispatch({\r\n      type: \"TOGGLE\",\r\n      id,\r\n    });\r\n  const onRemove = (e) => {\r\n    const itemSelect = e.currentTarget.parentNode.parentNode;\r\n    itemSelect.classList.add(\"remove\");\r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: \"REMOVE\",\r\n        id,\r\n      });\r\n    }, 700);\r\n\r\n    if (open) {\r\n      setOpen(!open);\r\n    }\r\n  };\r\n\r\n  const onUpdate = (e) => {\r\n    setOpen(!open);\r\n    setType(\"UPDATE\");\r\n    setSelected(id);\r\n    setTimeout(() => {\r\n      if (open === true) {\r\n        setOpen(open);\r\n      }\r\n    }, 400);\r\n    setInputs({\r\n      ...inputs,\r\n      title: title,\r\n      content: content,\r\n    });\r\n  };\r\n  const onAccordion = (e) => {\r\n    dispatch({\r\n      type: \"ACCORDION\",\r\n      id,\r\n    });\r\n  };\r\n  return (\r\n    <TodoItemList>\r\n      <TodoItemTitleBox>\r\n        <TodoItemStyleBox>\r\n          {/* checkBox를 꾸미기위해 Label 사용 */}\r\n          <TodoItemCheckBox done={done}>\r\n            <input type=\"checkbox\" id={`todo--item-checkbox${id}`} />\r\n            <label htmlFor={`todo--item-checkbox${id}`} onClick={onToggle}>\r\n              {done && <MdDone />}\r\n            </label>\r\n          </TodoItemCheckBox>\r\n          <TodoItemText done={done} onClick={onAccordion}>\r\n            {title}\r\n          </TodoItemText>\r\n        </TodoItemStyleBox>\r\n\r\n        {/* update, Remove Button */}\r\n        <TodoItemButtonBox>\r\n          <TodoItemUpdate onClick={onUpdate}>\r\n            <AiFillEdit />\r\n          </TodoItemUpdate>\r\n          <TodoItemRemove onClick={onRemove}>\r\n            <RiDeleteBin6Line />\r\n          </TodoItemRemove>\r\n        </TodoItemButtonBox>\r\n      </TodoItemTitleBox>\r\n      <TodoItemContentBox accordion={accordion} autoFocus>\r\n        {content}\r\n      </TodoItemContentBox>\r\n    </TodoItemList>\r\n  );\r\n}\r\n\r\nexport default React.memo(TodoItem);\r\n","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { useTodoOpenState, useTodoState } from \"./TodoContext\";\r\n\r\nconst TodoListArticle = styled.article`\r\n  margin-left: 15px;\r\n  text-align: center;\r\n  height: 100%;\r\n  transition: 1.2s;\r\n  overflow: auto;\r\n  flex: 1;\r\n\r\n  h3 {\r\n    width: 1px;\r\n    height: 1px;\r\n    overflow: hidden;\r\n    font-size: 0;\r\n  }\r\n  > p {\r\n    text-align: left;\r\n  }\r\n  ul {\r\n  }\r\n`;\r\n\r\nfunction TodoList() {\r\n  const [open] = useTodoOpenState();\r\n  const todos = useTodoState();\r\n  const countTodo = todos.filter((todo) => !todo.done).length;\r\n  return (\r\n    <TodoListArticle open={open}>\r\n      <h3>할일 목록</h3>\r\n      <p>\r\n        남은 할 일 <strong>{countTodo}</strong>개 입니다.\r\n      </p>\r\n      <ul>\r\n        {todos.map((todo) => (\r\n          <TodoItem\r\n            key={todo.id}\r\n            id={todo.id}\r\n            title={todo.title}\r\n            content={todo.content}\r\n            done={todo.done}\r\n            accordion={todo.accordion}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </TodoListArticle>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport TodoTemplate from \"./components/TodoTempleate\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport TodoHead from \"./components/TodoHead\";\r\nimport TodoCreate from \"./components/TodoCreate\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport { TodoProvider } from \"./components/TodoContext\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body{\r\n    background: #e9ecef;\r\n  }\r\n  ul, ol {list-style:none;}\r\n  ul,ol,li,button{margin:0; padding:0;}\r\n  button {border:none; background:none; outline-style:none; cursor:pointer;}\r\n\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <TodoProvider>\r\n      {/* 부모인 body 접근 후 css 적용 */}\r\n      <GlobalStyle />\r\n      {/* logo, nav 등 */}\r\n      <TodoHead />\r\n      {/* main 컨텐츠 */}\r\n      <TodoTemplate>\r\n        <TodoList></TodoList>\r\n        <TodoCreate />\r\n      </TodoTemplate>\r\n    </TodoProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"wrapper\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}